'use client';

import React, { useState } from 'react';
import { Container, Typography, Box, Card, Paper, Tab, Tabs, Chip, Avatar } from '@mui/material';
import {
  Storage as DatabaseIcon,
  Security as SecurityIcon,
  Api as ApiIcon,
  Code as CodeIcon,
} from '@mui/icons-material';
import { motion } from 'framer-motion';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';
import {
  TabPanel,
  ArchitectureOverview,
  DatabaseTab,
  DataSourceTab,
} from '@/components/showcase/architecture';
import * as styles from './styles';

export default function ArchitecturePage() {
  const [tabValue, setTabValue] = useState(0);

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  const apiEndpoints = [
    { method: 'GET', path: '/api/letters', description: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º' },
    { method: 'POST', path: '/api/letters', description: '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ' },
    { method: 'POST', path: '/api/letters/deliver', description: '–û—Ç–º–µ—Ç–∏—Ç—å –ø–∏—Å—å–º–æ –∫–∞–∫ –≤—ã–¥–∞–Ω–Ω–æ–µ' },
    { method: 'GET', path: '/api/rooms', description: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç' },
    {
      method: 'GET',
      path: '/api/rooms/[roomNumber]/users',
      description: '–ü–æ–ª—É—á–∏—Ç—å –∂–∏–ª—å—Ü–æ–≤ –∫–æ–º–Ω–∞—Ç—ã',
    },
    { method: 'GET', path: '/api/users', description: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' },
    { method: 'POST', path: '/api/users/invite', description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
    { method: 'GET', path: '/api/auth/me', description: '–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
  ];

  return (
    <Container maxWidth="xl" sx={styles.containerStyles}>
      {/* Header */}
      <Box sx={styles.headerBoxStyles}>
        <Typography
          variant="h2"
          component={motion.h1}
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          sx={styles.titleStyles}
        >
          –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã
        </Typography>
        <Typography variant="h6" color="text.secondary" sx={styles.subtitleStyles}>
          –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        </Typography>
      </Box>

      {/* Architecture Overview */}
      <ArchitectureOverview />

      {/* Tabs */}
      <Paper sx={styles.tabsPaperStyles}>
        <Tabs
          value={tabValue}
          onChange={handleTabChange}
          centered={false}
          variant="scrollable"
          scrollButtons="auto"
          allowScrollButtonsMobile
          sx={styles.tabsStyles}
        >
          <Tab
            label={
              <Box sx={styles.tabLabelBoxStyles}>
                <Box sx={{ display: { xs: 'none', md: 'block' } }}>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</Box>
                <Box sx={{ display: { xs: 'block', md: 'none' } }}>–ë–î</Box>
              </Box>
            }
          />
          <Tab
            label={
              <Box sx={styles.tabLabelBoxStyles}>
                <Box sx={{ display: { xs: 'none', md: 'block' } }}>API –°—Ç—Ä—É–∫—Ç—É—Ä–∞</Box>
                <Box sx={{ display: { xs: 'block', md: 'none' } }}>API</Box>
              </Box>
            }
          />
          <Tab
            label={
              <Box sx={styles.tabLabelBoxStyles}>
                <Box sx={{ display: { xs: 'none', md: 'block' } }}>DataSource</Box>
                <Box sx={{ display: { xs: 'block', md: 'none' } }}>DS</Box>
              </Box>
            }
          />
          <Tab
            label={
              <Box sx={styles.tabLabelBoxStyles}>
                <Box sx={{ display: { xs: 'none', md: 'block' } }}>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</Box>
                <Box sx={{ display: { xs: 'block', md: 'none' } }}>–ó–∞—â–∏—Ç–∞</Box>
              </Box>
            }
          />
          <Tab
            label={
              <Box sx={styles.tabLabelBoxStyles}>
                <Box sx={{ display: { xs: 'none', md: 'block' } }}>–ú–µ—Ç—Ä–∏–∫–∏</Box>
                <Box sx={{ display: { xs: 'block', md: 'none' } }}>–ú–µ—Ç—Ä–∏–∫–∏</Box>
              </Box>
            }
          />
        </Tabs>
      </Paper>

      {/* Database Schema */}
      <TabPanel value={tabValue} index={0}>
        <DatabaseTab />
      </TabPanel>

      {/* API Structure */}
      <TabPanel value={tabValue} index={1}>
        <Typography variant="h4" sx={styles.apiTitleStyles}>
          API –°—Ç—Ä—É–∫—Ç—É—Ä–∞
        </Typography>

        <Box sx={{ mb: { xs: 1, md: 6 } }}>
          {apiEndpoints.map((endpoint, index) => (
            <Card key={index} sx={styles.apiEndpointCardStyles}>
              <Box sx={styles.apiEndpointBoxStyles}>
                <Chip
                  label={endpoint.method}
                  size="small"
                  sx={styles.getMethodChipStyles(endpoint.method)}
                />
                <Typography variant="body2" sx={styles.apiPathStyles}>
                  {endpoint.path}
                </Typography>
                <Typography variant="body2" color="text.secondary" sx={styles.apiDescriptionStyles}>
                  {endpoint.description}
                </Typography>
              </Box>
            </Card>
          ))}
        </Box>

        <Paper sx={styles.codeExamplePaperStyles}>
          <Typography variant="h5" sx={styles.codeExampleTitleStyles}>
            –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API
          </Typography>
          <SyntaxHighlighter
            language="typescript"
            style={oneDark}
            customStyle={styles.syntaxHighlighterStyles}
          >
            {`// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∏—Å–µ–º
const response = await fetch('/api/letters', {
  method: 'GET',
  headers: {
    'Authorization': \`Bearer \${token}\`,
    'Content-Type': 'application/json'
  }
});

const letters = await response.json();

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞
const newLetter = await fetch('/api/letters', {
  method: 'POST',
  headers: {
    'Authorization': \`Bearer \${token}\`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    user_id: 'user-uuid',
    status: 'pending'
  })
});`}
          </SyntaxHighlighter>
        </Paper>
      </TabPanel>

      {/* DataSource Architecture */}
      <TabPanel value={tabValue} index={2}>
        <DataSourceTab />
      </TabPanel>

      {/* Security */}
      <TabPanel value={tabValue} index={3}>
        <Typography variant="h4" sx={styles.apiTitleStyles}>
          –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        </Typography>

        <Box sx={styles.securityGridStyles}>
          {[
            {
              title: 'Row Level Security',
              description: '–ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å—Ç—Ä–æ–∫ –≤ PostgreSQL',
              icon: 'üîí',
              features: [
                '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è',
                '–ü–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞',
                '–ó–∞—â–∏—Ç–∞ –æ—Ç SQL-–∏–Ω—ä–µ–∫—Ü–∏–π',
                '–ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ —Ä–æ–ª—è–º',
              ],
            },
            {
              title: 'JWT Authentication',
              description: '–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å —Ç–æ–∫–µ–Ω–∞–º–∏',
              icon: 'üé´',
              features: [
                '–°—Ç–∞—Çeless —Ç–æ–∫–µ–Ω—ã',
                '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
                '–ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã',
                'Middleware –ø—Ä–æ–≤–µ—Ä–∫–∞',
              ],
            },
            {
              title: 'API Protection',
              description: '–ó–∞—â–∏—Ç–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤',
              icon: 'üõ°Ô∏è',
              features: [
                'Rate limiting',
                'CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
                '–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
                '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤',
              ],
            },
            {
              title: 'Data Encryption',
              description: '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
              icon: 'üîê',
              features: [
                'HTTPS/TLS',
                '–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π',
                '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤ –ë–î',
                '–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ cookies',
              ],
            },
          ].map((security, index) => (
            <Box key={security.title} sx={styles.getSecurityGridItemStyles(index)}>
              <motion.div
                initial={{ opacity: 0, scale: 0 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ delay: index * 0.1 }}
              >
                <Card sx={styles.securityCardStyles}>
                  <Typography variant="h3" sx={styles.securityIconStyles}>
                    {security.icon}
                  </Typography>
                  <Typography variant="h6" sx={styles.securityTitleStyles}>
                    {security.title}
                  </Typography>
                  <Typography
                    variant="body2"
                    color="text.secondary"
                    sx={styles.securityDescriptionStyles}
                  >
                    {security.description}
                  </Typography>
                  {security.features.map((feature, featureIndex) => (
                    <Chip
                      key={featureIndex}
                      label={feature}
                      size="small"
                      variant="outlined"
                      sx={styles.securityChipStyles}
                    />
                  ))}
                </Card>
              </motion.div>
            </Box>
          ))}
        </Box>

        <Paper sx={styles.codeExamplePaperStyles}>
          <Typography variant="h5" sx={styles.codeExampleTitleStyles}>
            –ü—Ä–∏–º–µ—Ä RLS –ø–æ–ª–∏—Ç–∏–∫–∏
          </Typography>
          <SyntaxHighlighter
            language="sql"
            style={oneDark}
            customStyle={styles.syntaxHighlighterStyles}
          >
            {`-- –ü–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã letters
CREATE POLICY "Users can view own letters" ON letters
  FOR SELECT USING (
    auth.uid() = user_id OR 
    auth.jwt() ->> 'role' = 'admin'
  );

-- –ü–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø–∏—Å–µ–º (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
CREATE POLICY "Only admins can insert letters" ON letters
  FOR INSERT WITH CHECK (
    auth.jwt() ->> 'role' = 'admin'
  );`}
          </SyntaxHighlighter>
        </Paper>
      </TabPanel>

      {/* Metrics Tab */}
      <TabPanel value={tabValue} index={4}>
        <Typography variant="h4" sx={styles.apiTitleStyles}>
          –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        </Typography>

        <Box sx={styles.metricsGridStyles}>
          {[
            { label: '–í—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', value: '8 –Ω–µ–¥–µ–ª—å', color: '#2563eb' },
            { label: '–°—Ç—Ä–æ–∫ –∫–æ–¥–∞', value: '15,000+', color: '#7c3aed' },
            { label: '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ React', value: '45+', color: '#059669' },
            { label: 'API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤', value: '12', color: '#dc2626' },
            { label: '–ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏', value: '89%', color: '#ea580c' },
            { label: 'Lighthouse Score', value: '95/100', color: '#0891b2' },
          ].map((metric, index) => (
            <motion.div
              key={metric.label}
              initial={{ opacity: 0, scale: 0 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: index * 0.1 }}
            >
              <Card sx={styles.getMetricCardStyles(metric.color)}>
                <Typography variant="h4" sx={styles.getMetricValueStyles(metric.color)}>
                  {metric.value}
                </Typography>
                <Typography variant="body2" color="text.secondary" sx={styles.metricLabelStyles}>
                  {metric.label}
                </Typography>
              </Card>
            </motion.div>
          ))}
        </Box>

        <Typography variant="h4" sx={styles.apiTitleStyles}>
          –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
        </Typography>

        <Box sx={styles.techFeaturesBoxStyles}>
          {[
            {
              icon: <SecurityIcon />,
              title: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
              items: ['Row Level Security', 'JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', '–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö', 'HTTPS/SSL'],
            },
            {
              icon: <DatabaseIcon />,
              title: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
              items: [
                'Server-Side Rendering',
                'React Query –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ',
                '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
                'Code splitting',
              ],
            },
            {
              icon: <CodeIcon />,
              title: 'UX/UI',
              items: [
                'Material Design 3',
                '–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å—Ç–∫–∞',
                '–¢–µ–º–Ω–∞—è/—Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞',
                '–ê–Ω–∏–º–∞—Ü–∏–∏ Framer Motion',
              ],
            },
            {
              icon: <ApiIcon />,
              title: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞',
              items: [
                '–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞',
                'API-first –ø–æ–¥—Ö–æ–¥',
                'Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
                'Serverless —Ñ—É–Ω–∫—Ü–∏–∏',
              ],
            },
          ].map((highlight, index) => (
            <Box key={highlight.title} sx={styles.techFeatureItemStyles}>
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.5 + index * 0.1 }}
              >
                <Card sx={styles.techFeatureCardStyles}>
                  <Box sx={styles.techFeatureHeaderStyles}>
                    <Avatar sx={styles.techFeatureAvatarStyles}>{highlight.icon}</Avatar>
                    <Typography variant="h6" sx={styles.techFeatureTitleStyles}>
                      {highlight.title}
                    </Typography>
                  </Box>
                  {highlight.items.map((item, itemIndex) => (
                    <Chip
                      key={itemIndex}
                      label={item}
                      size="small"
                      variant="outlined"
                      sx={styles.techFeatureChipStyles}
                    />
                  ))}
                </Card>
              </motion.div>
            </Box>
          ))}
        </Box>
      </TabPanel>
    </Container>
  );
}
