import React, { useState } from 'react';
import { useRoomsDataSource, useRoomMutationsDataSource } from '@/hooks/useRoomsDataSource';
import type { Room } from '@/types/supabase';
import RoomModal from './RoomModal';
import SectionHeader from '@/components/admin/SectionHeader';
import SearchInput from '@/components/admin/SearchInput';
import MobileRoomCard from './MobileRoomCard';

const MobileRooms: React.FC = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [modalOpen, setModalOpen] = useState(false);
  const [modalRoom, setModalRoom] = useState<Room | null>(null);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é DataSource –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
  const { data: rooms = [], isLoading } = useRoomsDataSource();
  const { createRoom, updateRoom, deleteRoom } = useRoomMutationsDataSource();

  const filteredRooms = rooms.filter((room: Room) =>
    room.room_number.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const handleAdd = () => {
    setModalRoom(null);
    setModalOpen(true);
  };

  const handleEdit = (room: Room) => {
    setModalRoom(room);
    setModalOpen(true);
  };

  const handleSave = async (data: Partial<Room>) => {
    try {
      if (data.id) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
        await updateRoom.mutateAsync({
          id: data.id,
          room_number: data.room_number!,
        });
      } else {
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
        await createRoom.mutateAsync({
          room_number: data.room_number!,
        });
      }
      setModalOpen(false);
      setModalRoom(null);
    } catch (error) {
      // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –º—É—Ç–∞—Ü–∏–∏
      console.error('Error saving room:', error);
    }
  };

  const handleDelete = async (room: Room) => {
    try {
      await deleteRoom.mutateAsync(room.id);
    } catch (error) {
      // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –º—É—Ç–∞—Ü–∏–∏
      console.error('Error deleting room:', error);
    }
  };

  const isSaving = createRoom.isPending || updateRoom.isPending;

  return (
    <div className="p-2 pb-20 min-h-screen bg-gray-50">
      <SectionHeader
        icon={
          <span role="img" aria-label="rooms">
            üè†
          </span>
        }
        title="–ö–æ–º–Ω–∞—Ç—ã"
        description="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç –≤ —Å–∏—Å—Ç–µ–º–µ."
      />
      <div className="flex justify-between items-center mb-4">
        <SearchInput value={searchQuery} onChange={setSearchQuery} placeholder="–ü–æ–∏—Å–∫ –∫–æ–º–Ω–∞—Ç..." />
      </div>
      <div className="space-y-4">
        {isLoading ? (
          <div className="text-center py-8 text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        ) : filteredRooms.length === 0 ? (
          <div className="text-center py-8 text-gray-400">–ö–æ–º–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
        ) : (
          filteredRooms.map((room: Room) => (
            <MobileRoomCard
              key={room.id}
              room={room}
              onEdit={() => handleEdit(room)}
              onDelete={handleDelete}
            />
          ))
        )}
      </div>
      <button
        className="fixed bottom-20 right-6 w-14 h-14 rounded-full bg-blue-600 text-white text-3xl shadow-lg flex items-center justify-center"
        onClick={handleAdd}
        aria-label="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É"
      >
        +
      </button>
      <RoomModal
        room={modalRoom}
        open={modalOpen}
        onClose={() => {
          setModalOpen(false);
          setModalRoom(null);
        }}
        onSave={handleSave}
        loading={isSaving}
      />
    </div>
  );
};

export default MobileRooms;
