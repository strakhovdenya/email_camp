import React from 'react';
import { Typography, Box, Paper, Card, Chip } from '@mui/material';
import { motion } from 'framer-motion';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';
import * as styles from './DataSourceTab.styles';

export function DataSourceTab() {
  return (
    <>
      <Typography variant="h4" sx={styles.titleStyles}>
        DataSource –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
      </Typography>

      <Paper sx={styles.paperStyles}>
        <Typography variant="h5" sx={styles.sectionTitleStyles}>
          –ü–∞—Ç—Ç–µ—Ä–Ω –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        </Typography>
        <Typography variant="body1" sx={styles.descriptionStyles}>
          DataSource –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
          (Supabase, Mock, PostgreSQL, MySQL) –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –æ–¥–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
          MockDataSource –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π
          –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        </Typography>

        <Box sx={styles.benefitsContainerStyles}>
          {[
            '–ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
            '–õ–µ–≥–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ',
            '–¢–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å',
            '–î–µ–º–æ —Ä–µ–∂–∏–º',
            '–¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
          ].map((benefit) => (
            <Chip key={benefit} label={benefit} variant="outlined" size="small" />
          ))}
        </Box>
      </Paper>

      {/* DataSource Structure */}
      <Box sx={styles.structureContainerStyles}>
        {/* Interfaces */}
        <motion.div
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ delay: 0.1 }}
        >
          <Card sx={styles.getStructureCardStyles('#2563eb')}>
            <Typography variant="h6" sx={styles.getStructureCardTitleStyles('#2563eb')}>
              üìã –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
            </Typography>
            {[
              'IDataSource - –≥–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
              'IUserDataSource - –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
              'ILetterDataSource - –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–∏—Å—å–º–∞–º–∏',
              'IRoomDataSource - –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏',
            ].map((item, index) => (
              <Typography key={index} variant="body2" sx={styles.structureCardItemStyles}>
                ‚Ä¢ {item}
              </Typography>
            ))}
          </Card>
        </motion.div>

        {/* Factory */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
        >
          <Card sx={styles.getStructureCardStyles('#7c3aed')}>
            <Typography variant="h6" sx={styles.getStructureCardTitleStyles('#7c3aed')}>
              üè≠ –§–∞–±—Ä–∏–∫–∞
            </Typography>
            {[
              'Singleton –ø–∞—Ç—Ç–µ—Ä–Ω',
              '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
              '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è',
              '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º',
            ].map((item, index) => (
              <Typography key={index} variant="body2" sx={styles.structureCardItemStyles}>
                ‚Ä¢ {item}
              </Typography>
            ))}
          </Card>
        </motion.div>

        {/* Implementations */}
        <motion.div
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ delay: 0.3 }}
        >
          <Card sx={styles.getStructureCardStyles('#059669')}>
            <Typography variant="h6" sx={styles.getStructureCardTitleStyles('#059669')}>
              üîå –†–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            </Typography>
            {[
              'SupabaseDataSource - –ø—Ä–æ–¥–∞–∫—à–Ω',
              'MockDataSource - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–µ–º–æ',
              'PostgreSQLDataSource - –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è',
              'MySQLDataSource - –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è',
            ].map((item, index) => (
              <Typography key={index} variant="body2" sx={styles.structureCardItemStyles}>
                ‚Ä¢ {item}
              </Typography>
            ))}
          </Card>
        </motion.div>
      </Box>

      {/* Configuration Example */}
      <Paper sx={styles.paperStyles}>
        <Typography variant="h5" sx={styles.sectionTitleStyles}>
          –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        </Typography>
        <SyntaxHighlighter
          language="typescript"
          style={oneDark}
          customStyle={styles.syntaxHighlighterStyles}
        >
          {`// src/config/datasource.ts
export type DataSourceType = 'supabase' | 'mock' | 'postgresql' | 'mysql';

// –ù–ê–°–¢–†–û–ô–ö–ê: –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
export const CURRENT_DATASOURCE: DataSourceType = 'supabase'; // –∏–ª–∏ 'mock'

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ mock –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ–º–æ
// export const CURRENT_DATASOURCE: DataSourceType = 'mock';

// –î–µ–º–æ —Ä–µ–∂–∏–º —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
// - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
// - –ü–∏—Å—å–º–∞ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
// - –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–µ–∫ API`}
        </SyntaxHighlighter>
      </Paper>

      {/* Usage Example */}
      <Paper sx={styles.paperStyles}>
        <Typography variant="h5" sx={styles.sectionTitleStyles}>
          –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
        </Typography>
        <SyntaxHighlighter
          language="typescript"
          style={oneDark}
          customStyle={styles.syntaxHighlighterStyles}
        >
          {`// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Ö—É–∫–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
import { useUsersDataSource, useUserMutationsDataSource } from '@/hooks/useUsersDataSource';

function UsersList() {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å React Query –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const { data: users, isLoading, error } = useUsersDataSource();
  
  // –ú—É—Ç–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–µ—à–∞
  const { createUser, updateUser, deleteUser } = useUserMutationsDataSource();
  
  const handleCreateUser = async () => {
    await createUser.mutateAsync({
      first_name: '–ò–≤–∞–Ω',
      last_name: '–ü–µ—Ç—Ä–æ–≤',
      email: 'ivan@example.com',
      room_number: '101',
    });
  };
  
  if (isLoading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  if (error) return <div>–û—à–∏–±–∫–∞: {error.message}</div>;
  
  return (
    <div>
      {users?.map(user => (
        <div key={user.id}>{user.first_name} {user.last_name}</div>
      ))}
    </div>
  );
}`}
        </SyntaxHighlighter>
      </Paper>

      {/* Direct Usage */}
      <Paper sx={styles.paperStyles}>
        <Typography variant="h5" sx={styles.sectionTitleStyles}>
          –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ DataSource
        </Typography>
        <SyntaxHighlighter
          language="typescript"
          style={oneDark}
          customStyle={styles.syntaxHighlighterStyles}
        >
          {`// –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (–¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–¥–∞)
import { getDataSource } from '@/datasources/factory';

async function processUsers() {
  const dataSource = getDataSource();
  
  // –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  const users = await dataSource.users.getUsers();
  const newUser = await dataSource.users.createUser({
    first_name: '–ê–Ω–Ω–∞',
    last_name: '–°–∏–¥–æ—Ä–æ–≤–∞',
    email: 'anna@example.com',
    room_number: '205',
  });
  
  // –†–∞–±–æ—Ç–∞ —Å –ø–∏—Å—å–º–∞–º–∏
  const letters = await dataSource.letters.getLetters();
  const stats = await dataSource.letters.getLetterStats();
  
  // –†–∞–±–æ—Ç–∞ —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏
  const rooms = await dataSource.rooms.getRoomsWithLetters();
  
  return { users, letters, stats, rooms };
}`}
        </SyntaxHighlighter>
      </Paper>
    </>
  );
}
