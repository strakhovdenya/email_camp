const { chromium } = require('playwright');
const fs = require('fs');
const path = require('path');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
const { execSync } = require('child_process');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
async function checkServer(url = 'http://localhost:3000', maxRetries = 5) {
  const { chromium } = require('playwright');
  
  for (let i = 0; i < maxRetries; i++) {
    try {
      const browser = await chromium.launch();
      const page = await browser.newPage();
      await page.goto(url, { timeout: 5000 });
      await browser.close();
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
      return true;
    } catch (error) {
      console.log(`‚è≥ –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${maxRetries}: —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∂–¥—É...`);
      if (i < maxRetries - 1) {
        await new Promise(resolve => setTimeout(resolve, 3000));
      }
    }
  }
  
  console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:3000');
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
async function updateSpecificPages(pageNames = []) {
  console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
  const serverAvailable = await checkServer();
  if (!serverAvailable) {
    console.log('\nüí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: npm run dev');
    return;
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç
  try {
    if (pageNames.length > 0) {
      console.log(`üì∏ –û–±–Ω–æ–≤–ª—è—é —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü: ${pageNames.join(', ')}`);
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    }
    
    execSync('node scripts/take-screenshots.cjs', { 
      stdio: 'inherit',
      cwd: path.join(__dirname, '..')
    });
    
    console.log('\n‚ú® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤ public/images/gallery/');
    console.log('2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ scripts/gallery-config.json');
    console.log('3. –û–±–Ω–æ–≤–∏—Ç–µ src/app/showcase/gallery/page.tsx');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏
async function updateGallery() {
  console.log('üé® –û–±–Ω–æ–≤–ª—è—é –≥–∞–ª–µ—Ä–µ—é...');
  
  try {
    const configPath = path.join(__dirname, 'gallery-config.json');
    const galleryPath = path.join(__dirname, '..', 'src', 'app', 'showcase', 'gallery', 'page.tsx');
    
    if (!fs.existsSync(configPath)) {
      console.log('‚ùå –§–∞–π–ª gallery-config.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã.');
      return;
    }
    
    const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
    const galleryContent = fs.readFileSync(galleryPath, 'utf8');
    
    // –ò—â–µ–º –º–∞—Å—Å–∏–≤ galleryItems –∏ –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ
    const newContent = galleryContent.replace(
      /const galleryItems: GalleryItem\[\] = \[[\s\S]*?\];/,
      `const galleryItems: GalleryItem[] = ${JSON.stringify(config, null, 2)};`
    );
    
    fs.writeFileSync(galleryPath, newContent);
    console.log('‚úÖ –ì–∞–ª–µ—Ä–µ—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–∞–ª–µ—Ä–µ–∏:', error.message);
    console.log('üìã –û–±–Ω–æ–≤–∏—Ç–µ –≥–∞–ª–µ—Ä–µ—é –≤—Ä—É—á–Ω—É—é, —Å–∫–æ–ø–∏—Ä–æ–≤–∞–≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ scripts/gallery-config.json');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const command = args[0];

async function main() {
  switch (command) {
    case 'check':
      await checkServer();
      break;
    case 'gallery':
      await updateGallery();
      break;
    case 'all':
      await updateSpecificPages();
      await updateGallery();
      break;
    default:
      await updateSpecificPages();
      break;
  }
}

main().catch(console.error); 